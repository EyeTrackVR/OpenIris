; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = esp32AITinker ; do not change this value unless you know what you are doing

; The below options are available for all environments
; The ssid and password are requried for the trackers to connect to your network!!!
[wifi]
ssid="" ; your wifi network name goes here
password="" ; your wifi network password goes here
mDNSName="openiristracker" ; the name of the tracker as it will appear on your network
channel=1 ; wifi channel
ap_ssid="EyeTrackVR" ; your AP wifi network name goes here
ap_password="test" ; Place your AP Wifi password here
OTAPassword="12345678"
OTAServerPort=3232
enableADHOC=0 ; 0 = disable, 1 = enable
adhocChannel=1 ; channel to use for adhoc network
enableOTA=1 ; 0 = disable, 1 = enable

; DO NOT EDIT BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING
[pinoutsESPCAM_M5STACK]
; M5-Stack camera
# WARNING: The M5-Stack camera does not have PSRAM please set the noPSRM flag to 1
PWDN_GPIO_NUM  = -1
RESET_GPIO_NUM = 15
XCLK_GPIO_NUM  = 27
SIOD_GPIO_NUM  = 25
SIOC_GPIO_NUM  = 23
Y9_GPIO_NUM    = 19
Y8_GPIO_NUM    = 36
Y7_GPIO_NUM    = 18
Y6_GPIO_NUM    = 39
Y5_GPIO_NUM    =  5
Y4_GPIO_NUM    = 34
Y3_GPIO_NUM    = 35
Y2_GPIO_NUM    = 17
VSYNC_GPIO_NUM = 22
HREF_GPIO_NUM  = 26
PCLK_GPIO_NUM  = 21

build_flags =
	; CAMERA PINOUT DEFINITIONS
	-DPWDN_GPIO_NUM=${pinoutsESPCAM_M5STACK.PWDN_GPIO_NUM} ; Set the PWDN pin
	-DRESET_GPIO_NUM=${pinoutsESPCAM_M5STACK.RESET_GPIO_NUM} ; Set the RESET pin
	-DXCLK_GPIO_NUM=${pinoutsESPCAM_M5STACK.XCLK_GPIO_NUM} ; Set the XCLK pin
	-DSIOD_GPIO_NUM=${pinoutsESPCAM_M5STACK.SIOD_GPIO_NUM} ; Set the SIOD pin
	-DSIOC_GPIO_NUM=${pinoutsESPCAM_M5STACK.SIOC_GPIO_NUM} ; Set the SIOC pin
	-DY9_GPIO_NUM=${pinoutsESPCAM_M5STACK.Y9_GPIO_NUM} ; Set the Y9 pin
	-DY8_GPIO_NUM=${pinoutsESPCAM_M5STACK.Y8_GPIO_NUM} ; Set the Y8 pin
	-DY7_GPIO_NUM=${pinoutsESPCAM_M5STACK.Y7_GPIO_NUM} ; Set the Y7 pin
	-DY6_GPIO_NUM=${pinoutsESPCAM_M5STACK.Y6_GPIO_NUM} ; Set the Y6 pin
	-DY5_GPIO_NUM=${pinoutsESPCAM_M5STACK.Y5_GPIO_NUM} ; Set the Y5 pin
	-DY4_GPIO_NUM=${pinoutsESPCAM_M5STACK.Y4_GPIO_NUM} ; Set the Y4 pin
	-DY3_GPIO_NUM=${pinoutsESPCAM_M5STACK.Y3_GPIO_NUM} ; Set the Y3 pin
	-DY2_GPIO_NUM=${pinoutsESPCAM_M5STACK.Y2_GPIO_NUM} ; Set the Y2 pin
	-DVSYNC_GPIO_NUM=${pinoutsESPCAM_M5STACK.VSYNC_GPIO_NUM} ; Set the VSYNC pin
	-DHREF_GPIO_NUM=${pinoutsESPCAM_M5STACK.HREF_GPIO_NUM} ; Set the HREF pin
	-DPCLK_GPIO_NUM=${pinoutsESPCAM_M5STACK.PCLK_GPIO_NUM} ; Set the PCLK pin

[pinoutsESPCAM]
; ESP32CAM, the ov2640
PWDN_GPIO_NUM  = 32
RESET_GPIO_NUM = 33
XCLK_GPIO_NUM  = 4
SIOD_GPIO_NUM  = 18
SIOC_GPIO_NUM  = 23
Y9_GPIO_NUM    = 36
Y8_GPIO_NUM    = 19
Y7_GPIO_NUM    = 21
Y6_GPIO_NUM    = 39
Y5_GPIO_NUM    = 35
Y4_GPIO_NUM    = 14
Y3_GPIO_NUM    = 13
Y2_GPIO_NUM    = 34
VSYNC_GPIO_NUM = 5
HREF_GPIO_NUM  = 27
PCLK_GPIO_NUM  = 25

build_flags = 
	'-DCAMERA_MODULE_NAME="ESP32_CAM"'
	-DCONFIG_CAMERA_MODULE_CAM_BOARD=1
	; CAMERA PINOUT DEFINITIONS
	-DPWDN_GPIO_NUM=${pinoutsESPCAM.PWDN_GPIO_NUM} ; Set the PWDN pin
	-DRESET_GPIO_NUM=${pinoutsESPCAM.RESET_GPIO_NUM} ; Set the RESET pin
	-DXCLK_GPIO_NUM=${pinoutsESPCAM.XCLK_GPIO_NUM} ; Set the XCLK pin
	-DSIOD_GPIO_NUM=${pinoutsESPCAM.SIOD_GPIO_NUM} ; Set the SIOD pin
	-DSIOC_GPIO_NUM=${pinoutsESPCAM.SIOC_GPIO_NUM} ; Set the SIOC pin
	-DY9_GPIO_NUM=${pinoutsESPCAM.Y9_GPIO_NUM} ; Set the Y9 pin
	-DY8_GPIO_NUM=${pinoutsESPCAM.Y8_GPIO_NUM} ; Set the Y8 pin
	-DY7_GPIO_NUM=${pinoutsESPCAM.Y7_GPIO_NUM} ; Set the Y7 pin
	-DY6_GPIO_NUM=${pinoutsESPCAM.Y6_GPIO_NUM} ; Set the Y6 pin
	-DY5_GPIO_NUM=${pinoutsESPCAM.Y5_GPIO_NUM} ; Set the Y5 pin
	-DY4_GPIO_NUM=${pinoutsESPCAM.Y4_GPIO_NUM} ; Set the Y4 pin
	-DY3_GPIO_NUM=${pinoutsESPCAM.Y3_GPIO_NUM} ; Set the Y3 pin
	-DY2_GPIO_NUM=${pinoutsESPCAM.Y2_GPIO_NUM} ; Set the Y2 pin
	-DVSYNC_GPIO_NUM=${pinoutsESPCAM.VSYNC_GPIO_NUM} ; Set the VSYNC pin
	-DHREF_GPIO_NUM=${pinoutsESPCAM.HREF_GPIO_NUM} ; Set the HREF pin
	-DPCLK_GPIO_NUM=${pinoutsESPCAM.PCLK_GPIO_NUM} ; Set the PCLK pin

[pinoutsAITinker]
; AI Tinker camera, the ov2650
PWDN_GPIO_NUM  = 32
RESET_GPIO_NUM = -1
XCLK_GPIO_NUM  = 0
SIOD_GPIO_NUM  = 26
SIOC_GPIO_NUM  = 27
Y9_GPIO_NUM    = 35
Y8_GPIO_NUM    = 34
Y7_GPIO_NUM    = 39
Y6_GPIO_NUM    = 36
Y5_GPIO_NUM    = 21
Y4_GPIO_NUM    = 19
Y3_GPIO_NUM    = 18
Y2_GPIO_NUM    = 5
VSYNC_GPIO_NUM = 25
HREF_GPIO_NUM  = 23
PCLK_GPIO_NUM  = 22

build_flags = 
	'-DCAMERA_MODULE_NAME="ESP32_CAM_AI_THINKER"'
	-DCONFIG_CAMERA_MODULE_AITINKER_BOARD=1
	; CAMERA PINOUT DEFINITIONS
	-DPWDN_GPIO_NUM=${pinoutsAITinker.PWDN_GPIO_NUM} ; Set the PWDN pin
	-DRESET_GPIO_NUM=${pinoutsAITinker.RESET_GPIO_NUM} ; Set the RESET pin
	-DXCLK_GPIO_NUM=${pinoutsAITinker.XCLK_GPIO_NUM} ; Set the XCLK pin
	-DSIOD_GPIO_NUM=${pinoutsAITinker.SIOD_GPIO_NUM} ; Set the SIOD pin
	-DSIOC_GPIO_NUM=${pinoutsAITinker.SIOC_GPIO_NUM} ; Set the SIOC pin
	-DY9_GPIO_NUM=${pinoutsAITinker.Y9_GPIO_NUM} ; Set the Y9 pin
	-DY8_GPIO_NUM=${pinoutsAITinker.Y8_GPIO_NUM} ; Set the Y8 pin
	-DY7_GPIO_NUM=${pinoutsAITinker.Y7_GPIO_NUM} ; Set the Y7 pin
	-DY6_GPIO_NUM=${pinoutsAITinker.Y6_GPIO_NUM} ; Set the Y6 pin
	-DY5_GPIO_NUM=${pinoutsAITinker.Y5_GPIO_NUM} ; Set the Y5 pin
	-DY4_GPIO_NUM=${pinoutsAITinker.Y4_GPIO_NUM} ; Set the Y4 pin
	-DY3_GPIO_NUM=${pinoutsAITinker.Y3_GPIO_NUM} ; Set the Y3 pin
	-DY2_GPIO_NUM=${pinoutsAITinker.Y2_GPIO_NUM} ; Set the Y2 pin
	-DVSYNC_GPIO_NUM=${pinoutsAITinker.VSYNC_GPIO_NUM} ; Set the VSYNC pin
	-DHREF_GPIO_NUM=${pinoutsAITinker.HREF_GPIO_NUM} ; Set the HREF pin
	-DPCLK_GPIO_NUM=${pinoutsAITinker.PCLK_GPIO_NUM} ; Set the PCLK pin

[pinoutsESP-EYE]
; CAMERA_MODULE_ESP-EYE_KIT
PWDN_GPIO_NUM  = -1
RESET_GPIO_NUM = -1
XCLK_GPIO_NUM  = 4
SIOD_GPIO_NUM  = 18
SIOC_GPIO_NUM  = 23
Y9_GPIO_NUM    = 36
Y8_GPIO_NUM    = 37
Y7_GPIO_NUM    = 38
Y6_GPIO_NUM    = 39
Y5_GPIO_NUM    = 35
Y4_GPIO_NUM    = 14
Y3_GPIO_NUM    = 13
Y2_GPIO_NUM    = 34
VSYNC_GPIO_NUM = 5
HREF_GPIO_NUM  = 27
PCLK_GPIO_NUM  = 25

build_flags =
	'-DCAMERA_MODULE_NAME="ESP32_CAM_ESP_EYE"'
	-DCONFIG_CAMERA_MODULE_ESP_EYE=1
	; CAMERA PINOUT DEFINITIONS
	-DPWDN_GPIO_NUM=${pinoutsESP-EYE.PWDN_GPIO_NUM} ; Set the PWDN pin
	-DRESET_GPIO_NUM=${pinoutsESP-EYE.RESET_GPIO_NUM} ; Set the RESET pin
	-DXCLK_GPIO_NUM=${pinoutsESP-EYE.XCLK_GPIO_NUM} ; Set the XCLK pin
	-DSIOD_GPIO_NUM=${pinoutsESP-EYE.SIOD_GPIO_NUM} ; Set the SIOD pin
	-DSIOC_GPIO_NUM=${pinoutsESP-EYE.SIOC_GPIO_NUM} ; Set the SIOC pin
	-DY9_GPIO_NUM=${pinoutsESP-EYE.Y9_GPIO_NUM} ; Set the Y9 pin
	-DY8_GPIO_NUM=${pinoutsESP-EYE.Y8_GPIO_NUM} ; Set the Y8 pin
	-DY7_GPIO_NUM=${pinoutsESP-EYE.Y7_GPIO_NUM} ; Set the Y7 pin
	-DY6_GPIO_NUM=${pinoutsESP-EYE.Y6_GPIO_NUM} ; Set the Y6 pin
	-DY5_GPIO_NUM=${pinoutsESP-EYE.Y5_GPIO_NUM} ; Set the Y5 pin
	-DY4_GPIO_NUM=${pinoutsESP-EYE.Y4_GPIO_NUM} ; Set the Y4 pin
	-DY3_GPIO_NUM=${pinoutsESP-EYE.Y3_GPIO_NUM} ; Set the Y3 pin
	-DY2_GPIO_NUM=${pinoutsESP-EYE.Y2_GPIO_NUM} ; Set the Y2 pin
	-DVSYNC_GPIO_NUM=${pinoutsESP-EYE.VSYNC_GPIO_NUM} ; Set the VSYNC pin
	-DHREF_GPIO_NUM=${pinoutsESP-EYE.HREF_GPIO_NUM} ; Set the HREF pin
	-DPCLK_GPIO_NUM=${pinoutsESP-EYE.PCLK_GPIO_NUM} ; Set the PCLK pin

[pinoutsESPWROVER]
; CAMERA_MODULE_WROVER_KIT
PWDN_GPIO_NUM  =  -1
RESET_GPIO_NUM =  -1
XCLK_GPIO_NUM  =  21
SIOD_GPIO_NUM  =  26
SIOC_GPIO_NUM  =  27
Y9_GPIO_NUM    =  35
Y8_GPIO_NUM    =  34
Y7_GPIO_NUM    =  39
Y6_GPIO_NUM    =  36
Y5_GPIO_NUM    =  19
Y4_GPIO_NUM    =  18
Y3_GPIO_NUM    =  5
Y2_GPIO_NUM    =  4
VSYNC_GPIO_NUM =  25
HREF_GPIO_NUM  =  23
PCLK_GPIO_NUM  =  22

build_flags =
	'-DCAMERA_MODULE_NAME="ESP32_CAM_WROVER_KIT"'
	-DCONFIG_CAMERA_MODULE_WROVER_KIT=1
	; CAMERA PINOUT DEFINITIONS
	-DPWDN_GPIO_NUM=${pinoutsESPWROVER.PWDN_GPIO_NUM} ; Set the PWDN pin
	-DRESET_GPIO_NUM=${pinoutsESPWROVER.RESET_GPIO_NUM} ; Set the RESET pin
	-DXCLK_GPIO_NUM=${pinoutsESPWROVER.XCLK_GPIO_NUM} ; Set the XCLK pin
	-DSIOD_GPIO_NUM=${pinoutsESPWROVER.SIOD_GPIO_NUM} ; Set the SIOD pin
	-DSIOC_GPIO_NUM=${pinoutsESPWROVER.SIOC_GPIO_NUM} ; Set the SIOC pin
	-DY9_GPIO_NUM=${pinoutsESPWROVER.Y9_GPIO_NUM} ; Set the Y9 pin
	-DY8_GPIO_NUM=${pinoutsESPWROVER.Y8_GPIO_NUM} ; Set the Y8 pin
	-DY7_GPIO_NUM=${pinoutsESPWROVER.Y7_GPIO_NUM} ; Set the Y7 pin
	-DY6_GPIO_NUM=${pinoutsESPWROVER.Y6_GPIO_NUM} ; Set the Y6 pin
	-DY5_GPIO_NUM=${pinoutsESPWROVER.Y5_GPIO_NUM} ; Set the Y5 pin
	-DY4_GPIO_NUM=${pinoutsESPWROVER.Y4_GPIO_NUM} ; Set the Y4 pin
	-DY3_GPIO_NUM=${pinoutsESPWROVER.Y3_GPIO_NUM} ; Set the Y3 pin
	-DY2_GPIO_NUM=${pinoutsESPWROVER.Y2_GPIO_NUM} ; Set the Y2 pin
	-DVSYNC_GPIO_NUM=${pinoutsESPWROVER.VSYNC_GPIO_NUM} ; Set the VSYNC pin
	-DHREF_GPIO_NUM=${pinoutsESPWROVER.HREF_GPIO_NUM} ; Set the HREF pin
	-DPCLK_GPIO_NUM=${pinoutsESPWROVER.PCLK_GPIO_NUM} ; Set the PCLK pin

[common]
platform = espressif32
framework = arduino
monitor_speed = 115200
monitor_rts = 0
monitor_dtr = 0
monitor_filters =
	;colorize -- uncomment this to get a colorful text in your terminal
	log2file
	time
	default
	esp32_exception_decoder

;board_build.partitions = ${common.board_build.partitions} ; uncomment this to use the huge_app partition table, does not support OTA and only 1MB of SPIFFS
board_build.partitions = min_spiffs.csv ; uncomment this to use the min_spiffs partition table, supports OTA and 1MB of SPIFFS

build_flags =
	!python tools/\autoversioning.py ; add build version to build as preprocessor defines
	!python tools/\git_rev.py ; add git revision to build as preprocessor defines
	-DOTA_SERVER_PORT=${wifi.OTAServerPort} ; Set the OTA server
	-DENABLE_ADHOC=${wifi.enableADHOC}
	-DADHOC_CHANNEL=${wifi.adhocChannel}
	-DWIFI_CHANNEL=${wifi.channel}
	-DENABLE_OTA=${wifi.enableOTA}
	-DDEBUG_ESP_PORT=Serial ; set the debug port
	'-DMDNS_HOSTNAME=${wifi.mDNSName}' ; Set the OTA password
	'-DOTA_PASSWORD=${wifi.OTAPassword}' ; Set the OTA password
	'-DWIFI_SSID=${wifi.ssid}' ; Set the users wifi network name
	'-DWIFI_PASSWORD=${wifi.password}' ; Set the users wifi network password
	'-DWIFI_AP_SSID=${wifi.ap_ssid}' ; Set the users wifi network name
	'-DWIFI_AP_PASSWORD=${wifi.ap_password}' ; Set the users wifi network password
	-O2 ; optimize for speed
	-DASYNCWEBSERVER_REGEX ; enable regex in asyncwebserver

	# Comment these out if you are not using psram
	-DBOARD_HAS_PSRAM ; enable psram
	-mfix-esp32-psram-cache-issue ; fix for psram

;build_unflags = -Os ; disable optimization for size
lib_ldf_mode = deep+
upload_speed = 115200 ;115200 is used for compatability - if you are on windows and want the code to flash faster use 921600
lib_deps =
	;esp32-camera
	leftcoast/LC_baseTools@^1.5
	; geeksville/Micro-RTSP @ ^0.1.6 ; Micro-RTSP library for streaming video over RTSP - will be implemented soon
	https://github.com/me-no-dev/ESPAsyncWebServer.git
	https://github.com/me-no-dev/AsyncTCP.git
	https://github.com/bblanchon/ArduinoJson.git

build_type = debug
extra_scripts = pre:tools/customname.py

[env:esp32AITinker]
platform = ${common.platform}
board = esp32cam
framework = ${common.framework}
monitor_speed = ${common.monitor_speed}
monitor_rts = ${common.monitor_rts}
monitor_dtr = ${common.monitor_dtr}
monitor_filters = ${common.monitor_filters}
;build_unflags = ${common.build_unflags}
board_build.partitions = ${common.board_build.partitions} ;
lib_ldf_mode = ${common.lib_ldf_mode}
upload_speed = ${common.upload_speed}
lib_deps = ${common.lib_deps}
build_type = ${common.build_type}
extra_scripts = ${common.extra_scripts}
build_flags = ${common.build_flags}
			  -DCORE_DEBUG_LEVEL=4 ; set the debug level
			  -DDEBUG_MODE=1 ; Set the debug mode
			  ; CAMERA PINOUT DEFINITIONS
			  ${pinoutsAITinker.build_flags}

[env:esp32AITinker_release]
platform = ${common.platform}
board = esp32cam
framework = ${common.framework}
monitor_speed = ${common.monitor_speed}
monitor_rts = ${common.monitor_rts}
monitor_dtr = ${common.monitor_dtr}
;build_unflags = ${common.build_unflags}
board_build.partitions = ${common.board_build.partitions} ;
lib_ldf_mode = ${common.lib_ldf_mode}
upload_speed = ${common.upload_speed}
lib_deps = ${common.lib_deps}
build_type = release
extra_scripts = ${common.extra_scripts}
build_flags = ${common.build_flags}
			  -DDEBUG_MODE=0 ; Set the debug mode
			  -DCORE_DEBUG_LEVEL=1
			  ; CAMERA PINOUT DEFINITIONS
			  ${pinoutsAITinker.build_flags}

; Experimental OTA Environment - do not select unless you know what you are doing
[env:esp32AITinker_OTA]
platform = ${common.platform}
board = esp32cam
framework = ${common.framework}
build_flags = ${common.build_flags}
			  -DDEBUG_MODE=0 ; Set the debug mode
			  -DCORE_DEBUG_LEVEL=1
			  -DDEBUG_ESP_OTA
			  ; CAMERA PINOUT DEFINITIONS
			  ${pinoutsAITinker.build_flags}

lib_deps = ${common.lib_deps}
upload_speed = ${common.upload_speed}
monitor_speed = ${common.monitor_speed}
monitor_rts = ${common.monitor_rts}
monitor_dtr = ${common.monitor_dtr}
;build_unflags = ${common.build_unflags}
board_build.partitions = ${common.board_build.partitions} ; uncomment this to use the min_spiffs partition table, great for using OTA
lib_ldf_mode = ${common.lib_ldf_mode}
upload_port = 192.168.1.38
upload_protocol = espota
upload_flags =
	--port=3232
	--auth=12345678
build_type = release
extra_scripts = ${common.extra_scripts}

[env:esp32M5Stack]
platform = ${common.platform}
board = esp32cam
framework = ${common.framework}
monitor_speed = ${common.monitor_speed}
monitor_rts = ${common.monitor_rts}
monitor_dtr = ${common.monitor_dtr}
monitor_filters = ${common.monitor_filters}
;build_unflags = ${common.build_unflags}
board_build.partitions = ${common.board_build.partitions} ;
lib_ldf_mode = ${common.lib_ldf_mode}
upload_speed = ${common.upload_speed}
lib_deps = ${common.lib_deps}
build_type = ${common.build_type}
extra_scripts = ${common.extra_scripts}
build_flags = ${common.build_flags}
			  -DDEBUG_MODE=1 ; Set the debug mode
			  -DCORE_DEBUG_LEVEL=4 ; set the debug level
			  ; CAMERA PINOUT DEFINITIONS
			  ${pinoutsESPCAM_M5STACK.build_flags}

[env:esp32M5Stack_release]
platform = ${common.platform}
board = esp32cam
framework = ${common.framework}
monitor_speed = ${common.monitor_speed}
monitor_rts = ${common.monitor_rts}
monitor_dtr = ${common.monitor_dtr}
;build_unflags = ${common.build_unflags}
board_build.partitions = ${common.board_build.partitions} ;
lib_ldf_mode = ${common.lib_ldf_mode}
upload_speed = ${common.upload_speed}
lib_deps = ${common.lib_deps}
build_type = release
extra_scripts = ${common.extra_scripts}
build_flags = ${common.build_flags}
			  -DDEBUG_MODE=0 ; Set the debug mode
			  -DCORE_DEBUG_LEVEL=1
			  ; CAMERA PINOUT DEFINITIONS
			  ${pinoutsESPCAM_M5STACK.build_flags}

; Experimental OTA Environment - do not select unless you know what you are doing
[env:esp32M5Stack_OTA]
platform = ${common.platform}
board = esp32cam
framework = ${common.framework}
build_flags = ${common.build_flags}
			  -DDEBUG_MODE=0 ; Set the debug mode
			  -DCORE_DEBUG_LEVEL=1
			  -DDEBUG_ESP_OTA
			  ; CAMERA PINOUT DEFINITIONS
			  ${pinoutsESPCAM_M5STACK.build_flags}

lib_deps = ${common.lib_deps}
upload_speed = ${common.upload_speed}
monitor_speed = ${common.monitor_speed}
monitor_rts = ${common.monitor_rts}
monitor_dtr = ${common.monitor_dtr}
;build_unflags = ${common.build_unflags}
board_build.partitions = ${common.board_build.partitions} ; uncomment this to use the min_spiffs partition table, great for using OTA
lib_ldf_mode = ${common.lib_ldf_mode}
upload_port = 192.168.1.38
upload_protocol = espota
upload_flags =
	--port=3232
	--auth=12345678
build_type = release
extra_scripts = ${common.extra_scripts}

[env:esp32CAM]
platform = ${common.platform}
board = esp32cam
framework = ${common.framework}
monitor_speed = ${common.monitor_speed}
monitor_rts = ${common.monitor_rts}
monitor_dtr = ${common.monitor_dtr}
monitor_filters = ${common.monitor_filters}
;build_unflags = ${common.build_unflags}
board_build.partitions = ${common.board_build.partitions} ;
lib_ldf_mode = ${common.lib_ldf_mode}
upload_speed = ${common.upload_speed}
lib_deps = ${common.lib_deps}
build_type = ${common.build_type}
extra_scripts = ${common.extra_scripts}
build_flags = ${common.build_flags}
			  -DDEBUG_MODE=1 ; Set the debug mode
			  ; CAMERA PINOUT DEFINITIONS
			  ${pinoutsESPCAM.build_flags}

[env:esp32CAM_release]
platform = ${common.platform}
board = esp32cam
framework = ${common.framework}
monitor_speed = ${common.monitor_speed}
monitor_rts = ${common.monitor_rts}
monitor_dtr = ${common.monitor_dtr}
;build_unflags = ${common.build_unflags}
board_build.partitions = ${common.board_build.partitions} ;
lib_ldf_mode = ${common.lib_ldf_mode}
upload_speed = ${common.upload_speed}
lib_deps = ${common.lib_deps}
build_type = release
extra_scripts = ${common.extra_scripts}
build_flags = ${common.build_flags}
			  -DDEBUG_MODE=0 ; Set the debug mode
			  -DCORE_DEBUG_LEVEL=1
			  ; CAMERA PINOUT DEFINITIONS
			  ${pinoutsESPCAM.build_flags}

; Experimental OTA Environment - do not select unless you know what you are doing
[env:esp32CAM_OTA]
platform = ${common.platform}
board = esp32cam
framework = ${common.framework}
build_flags = ${common.build_flags}
			  -DDEBUG_MODE=0 ; Set the debug mode
			  -DCORE_DEBUG_LEVEL=1
			  -DDEBUG_ESP_OTA
			  ; CAMERA PINOUT DEFINITIONS
			  ${pinoutsESPCAM.build_flags}

lib_deps = ${common.lib_deps}
upload_speed = ${common.upload_speed}
monitor_speed = ${common.monitor_speed}
monitor_rts = ${common.monitor_rts}
monitor_dtr = ${common.monitor_dtr}
;build_unflags = ${common.build_unflags}
board_build.partitions = ${common.board_build.partitions} ; uncomment this to use the min_spiffs partition table, great for using OTA
lib_ldf_mode = ${common.lib_ldf_mode}
upload_port = 192.168.1.38
upload_protocol = espota
upload_flags = 
	--port=3232
	--auth=12345678
build_type = release
extra_scripts = ${common.extra_scripts}

[env:esp_eye]
platform = ${common.platform}
board = esp-wrover-kit
framework = ${common.framework}
;board_build.f_flash = 80000000L
;board_build.flash_mode = qio
monitor_speed = ${common.monitor_speed}
; monitor_rts = ${common.monitor_rts}
; monitor_dtr = ${common.monitor_dtr}
monitor_filters = ${common.monitor_filters}
;build_unflags = ${common.build_unflags}
board_build.partitions = ${common.board_build.partitions} ;
lib_ldf_mode = ${common.lib_ldf_mode}
upload_speed = ${common.upload_speed}
lib_deps = ${common.lib_deps}
build_type = ${common.build_type}
extra_scripts = ${common.extra_scripts}
build_flags = ${common.build_flags}
			  -DDEBUG_MODE=1 ; Set the debug mode
			  ; CAMERA PINOUT DEFINITIONS
			  ${pinoutsESP-EYE.build_flags}

[env:esp_eye_release]
platform = ${common.platform}
board = esp-wrover-kit
framework = ${common.framework}
;board_build.f_flash = 80000000L
;board_build.flash_mode = qio
monitor_speed = ${common.monitor_speed}
; monitor_rts = ${common.monitor_rts}
; monitor_dtr = ${common.monitor_dtr}
;build_unflags = ${common.build_unflags}
board_build.partitions = ${common.board_build.partitions} ;
lib_ldf_mode = ${common.lib_ldf_mode}
upload_speed = ${common.upload_speed}
lib_deps = ${common.lib_deps}
build_type = release
extra_scripts = ${common.extra_scripts}
build_flags = ${common.build_flags}
			  -DDEBUG_MODE=0 ; Set the debug mode
			  -DCORE_DEBUG_LEVEL=1
			  ; CAMERA PINOUT DEFINITIONS
			  ${pinoutsESP-EYE.build_flags}

; Experimental OTA Environment - do not select unless you know what you are doing
[env:esp_eye_OTA]
platform = ${common.platform}
board = esp-wrover-kit
framework = ${common.framework}
;board_build.f_flash = 80000000L
;board_build.flash_mode = qio
build_flags = ${common.build_flags}
			  -DDEBUG_MODE=0 ; Set the debug mode
			  -DCORE_DEBUG_LEVEL=1
			  -DDEBUG_ESP_OTA
			  ; CAMERA PINOUT DEFINITIONS
			  ${pinoutsESP-EYE.build_flags}
lib_deps = ${common.lib_deps}
upload_speed = ${common.upload_speed}
monitor_speed = ${common.monitor_speed}
;monitor_rts = ${common.monitor_rts}
;monitor_dtr = ${common.monitor_dtr}
;build_unflags = ${common.build_unflags}
board_build.partitions = ${common.board_build.partitions} ; uncomment this to use the min_spiffs partition table, great for using OTA
lib_ldf_mode = ${common.lib_ldf_mode}
upload_port = 192.168.1.38
upload_protocol = espota
upload_flags = 
	--port=3232
	--auth=12345678
build_type = release
extra_scripts = ${common.extra_scripts}

[env:wrover]
platform = ${common.platform}
board = esp-wrover-kit
framework = ${common.framework}
board_build.f_flash = 80000000L
board_build.flash_mode = qio
monitor_speed = ${common.monitor_speed}
monitor_filters = ${common.monitor_filters}
;build_unflags = ${common.build_unflags}
board_build.partitions = ${common.board_build.partitions}
lib_ldf_mode = ${common.lib_ldf_mode}
upload_speed = ${common.upload_speed}
lib_deps = ${common.lib_deps}
;upload_port = COM6
build_type = ${common.build_type}
extra_scripts = ${common.extra_scripts}
;monitor_rts = ${common.monitor_rts}
;monitor_dtr = ${common.monitor_dtr}
build_flags = ${common.build_flags}
			  -DCORE_DEBUG_LEVEL=4 ; set the debug level
			  -DDEBUG_MODE=1 ; Set the debug mode
			  ; CAMERA PINOUT DEFINITIONS
			  ${pinoutsESPWROVER.build_flags}
[env:wrover_release]
platform = ${common.platform}
board = esp-wrover-kit
framework = ${common.framework}
board_build.f_flash = 80000000L
board_build.flash_mode = qio
monitor_speed = ${common.monitor_speed}
monitor_filters = ${common.monitor_filters}
;build_unflags = ${common.build_unflags}
board_build.partitions = ${common.board_build.partitions} ; uncomment this to use the huge_app partition table, does not support OTA and only 1MB of SPIFFS
lib_ldf_mode = ${common.lib_ldf_mode}
upload_speed = ${common.upload_speed}
lib_deps = ${common.lib_deps}
;upload_port = COM6
build_type = ${common.build_type}
extra_scripts = ${common.extra_scripts}
;monitor_rts = ${common.monitor_rts}
;monitor_dtr = ${common.monitor_dtr}
build_flags = ${common.build_flags}
			  -DDEBUG_MODE=0 ; Set the debug mode
			  -DCORE_DEBUG_LEVEL=1
			  ; CAMERA PINOUT DEFINITIONS
			  ${pinoutsESPWROVER.build_flags}

; Experimental OTA Environment - do not select unless you know what you are doing
[env:wrover_OTA]
platform = ${common.platform}
board = esp-wrover-kit
framework = ${common.framework}
board_build.f_flash = 80000000L
board_build.flash_mode = qio
monitor_speed = ${common.monitor_speed}
monitor_filters = ${common.monitor_filters}
;build_unflags = ${common.build_unflags}
board_build.partitions = ${common.board_build.partitions} ; uncomment this to use the min_spiffs partition table, great for using OTA
lib_ldf_mode = ${common.lib_ldf_mode}
upload_speed = ${common.upload_speed}
lib_deps = ${common.lib_deps}
build_type = release
extra_scripts = ${common.extra_scripts}
;monitor_rts = ${common.monitor_rts}
;monitor_dtr = ${common.monitor_dtr}

build_flags = ${common.build_flags}
			  -DDEBUG_MODE=0 ; Set the debug mode
			  -DCORE_DEBUG_LEVEL=1
			  -DDEBUG_ESP_OTA
			  ; CAMERA PINOUT DEFINITIONS
			  ${pinoutsESPWROVER.build_flags}
upload_port = 192.168.1.38
upload_protocol = espota
upload_flags =
	--port=3232
	--auth=12345678
